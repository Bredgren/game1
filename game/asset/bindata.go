// Code generated by go-bindata.
// sources:
// assets/img/sheet.png
// assets/sheetDesc/sheet.json
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsImgSheetPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xc8\xed\x53\x12\x76\x00\xc0\xf1\x1f\x29\x6a\x69\xb9\xd6\x96\x19\xa6\x9c\x66\xb9\x5d\x59\x1c\x12\x37\x23\x15\x11\x83\x32\x82\x24\x41\xf3\x14\x52\xa0\x50\xc1\x92\x31\x23\x06\x96\x3d\xac\xba\x8e\x75\x9e\xd5\xc2\xf0\xa9\x13\xcc\x12\x5d\x9a\x3d\x1c\x0f\x0d\xbb\x84\x64\xda\x03\x99\x96\xf4\x84\x11\x74\x05\x28\x95\x9c\xa0\xbb\xde\xed\xe5\xfe\x80\xbd\xf8\xbe\xf8\x7c\x4f\x90\x49\x9b\x17\x2e\x58\xbe\x00\x00\xb0\x90\x48\xc8\xda\x01\x00\xa8\xf9\x5a\x58\x08\x00\xc0\x90\xc6\xbc\x0f\x00\x80\x54\xed\xd8\x9c\x09\x3a\xff\x8e\x71\x00\x00\x82\x39\xd8\x6d\x58\x00\xba\x65\xe1\x7e\x26\x14\x00\x30\xbf\x92\x90\x5f\x05\xc0\x22\xc3\xd7\x20\xf7\xf8\xaa\x52\x00\x40\xb4\x00\x4f\x17\xe4\xf2\xd9\x82\x5f\x98\xfb\x59\xa0\x92\xb9\x97\x27\x48\xe6\xb1\x04\xf0\x94\xe4\xf5\xc9\x08\x34\x92\xd7\x58\x02\x40\xf0\x43\x62\x16\x96\x5a\x5d\xf4\xe1\x8f\xc0\x99\x67\xf4\x08\x03\x92\x66\xba\xde\xb5\xb6\x1c\xf9\x43\x52\xa0\x1c\xff\x4c\x1f\x78\xb5\xa4\x38\xf8\x68\x8b\x5b\xf1\x69\xf1\x3d\x0f\xe4\xbc\xcf\x4c\x80\x33\xef\x5f\xaa\xa8\x78\xcd\x77\xde\x1a\xe7\x6d\x67\x35\x25\xb1\x55\xee\x65\x36\x44\x95\x10\x71\xb5\x05\x73\x03\x19\x21\x60\x41\x50\xe1\x1b\x9c\x85\xb9\x66\xc8\xfb\x9a\xce\x08\x35\xfb\x4e\xd1\xb8\x56\xab\x3d\x5b\x98\x6a\x55\x7d\x09\x79\x2a\x9f\x4b\x2f\x8b\xd6\x0f\x2e\xb6\xac\x79\xda\xd1\x11\x4e\xff\x13\xda\x26\x35\x4d\xe2\x50\xa1\x45\x5b\x68\xc9\x5a\xf6\x9d\xa2\x80\x11\x7a\xec\xac\xa2\xaf\xaf\x2f\xfb\x73\x48\x9a\xd7\xd5\xaf\x72\x15\x29\x9c\x64\xe4\x83\x7a\xb1\xf9\xb0\x46\xd4\x0b\xcd\x93\x3a\x5c\x36\xd0\xd3\xbe\x62\x90\xdf\x7f\xa1\x56\xb3\x7b\x94\xa1\x5e\x19\x35\xed\xf1\x50\xde\xc3\xb6\x44\xf6\x73\xfb\x5c\xc8\xd1\xf7\x36\x29\xea\xe5\xee\x29\x3c\x92\x1f\x52\x80\xf1\x76\x41\x3f\x9a\xeb\xb4\x8a\xc8\xb5\x56\x0b\x26\x43\xba\x3a\xb4\x49\x28\xd9\x7f\x68\xfc\xde\x1c\xc2\xc0\xfd\xc9\x30\xd9\x3d\xed\x68\xa2\xbc\x08\xc6\x9a\x52\x3e\x9d\xc4\xf1\xe7\x15\xf8\x68\x53\x58\x2f\x87\x3e\x14\xdc\xd3\x7e\xd1\x98\x5e\x76\x68\x53\xb6\xef\xe0\xf3\x83\x41\x2b\x2f\x8c\x11\x25\xfb\x0e\x54\xfb\x76\x1b\x41\xa6\x7c\xcc\x22\x96\x85\xda\x68\x23\xe7\x7c\xb9\xe1\x7e\xbf\xbf\xf0\xe2\xb5\x11\x8a\xa6\xc1\x31\x51\xe2\xa1\xcf\xc2\xa5\xbf\x02\xb5\xc2\x85\x30\x71\x62\x7b\xf5\x67\xbe\xc0\xa6\x74\x83\x26\x2b\xc4\x5b\x5d\xef\xaf\x8b\xea\x3a\xcc\xba\xa3\x0a\x21\xd9\x1a\xd3\x6b\x68\x43\x1c\xfa\x52\x01\xb7\x59\x18\xf3\x62\x8b\x4f\xee\x08\x04\x34\x0f\x3a\xb6\x67\xf4\x68\xd1\x73\x5e\x48\xda\xc6\x46\x66\xfe\x70\xfb\xd1\x31\xcf\x28\x34\xa3\xd5\x1e\x52\x15\x69\x19\xc5\x94\x35\xc5\x54\xcf\x33\x15\x5f\x88\xec\x7d\x73\x2a\x7c\x50\x72\x55\xc6\x1d\x56\x71\xa8\xb5\xd9\x9b\x5a\x0b\x72\x91\xeb\x22\x6a\x9e\x14\x27\xc5\x99\xfe\xbd\x97\xa7\x38\xa3\x2d\xb7\x52\x63\x92\x44\x54\x89\xe7\xa1\x2c\x4e\x59\x2f\x25\x50\x2e\x29\x59\x03\x27\x12\x44\x54\xed\x8a\x73\x33\x5f\x12\xbb\x9b\x93\x1e\xe4\xc6\xba\x1f\xa3\xdf\xd9\x44\x54\x45\xc0\x23\x24\x7a\x86\x4d\x5e\xea\xf1\xe7\x2e\x9b\x88\x3a\x3b\x00\x63\xd0\xe2\x60\x27\xbf\xcd\xa9\x60\x4c\xc8\x12\xad\x46\x94\x09\xa9\xbe\x6c\x11\xbe\x7d\x45\xeb\xd6\x32\x12\x36\x7c\x97\x78\x39\x2f\x68\xab\x14\xe5\xfa\xde\x6c\xd7\xf5\xbf\x59\x82\xb9\x71\x9c\xd3\xf8\x76\x7e\xce\x6d\x29\x89\x8d\xa3\xb4\x70\xa3\x97\x9f\x97\xe6\x3c\x6d\xdd\xb6\x61\x40\x97\x35\x71\x57\x59\xb2\xa7\x9d\x95\xad\x2b\xed\x8e\x5a\x5f\xf6\x68\xe3\x35\x4a\xec\xb1\xf8\x9d\x15\xe4\xe9\xfe\xbb\x6e\x65\xad\xb0\x81\x51\xe0\xf4\xbd\xb0\x5e\x14\x27\xf6\x34\xc4\x19\x95\x51\x5d\xd5\xd3\x4f\x06\xac\x7a\x3e\x8e\xdc\xc6\x45\xc1\xd7\x24\xac\x63\xb5\xfd\x38\x32\xa6\xbc\x5d\x57\x72\x24\xcf\xaa\x10\x1f\x80\xc8\x53\x97\x5a\xf3\x31\xf4\x85\xb8\x33\x57\x52\x1b\xae\x87\x7d\x63\xdf\x1b\x0d\xb3\xe0\x2d\x85\x2e\x62\x73\xc2\x81\xc9\x65\x57\xd5\xb3\x34\xbe\xb8\xf6\xf1\x2e\x82\x23\x7f\x53\x5b\x3c\x19\x46\x88\xb8\x95\x1c\x5f\xc7\xdd\xd9\xab\x6d\x49\xfe\x7d\x8f\xc3\xb0\xef\x2d\x49\x21\xf9\x6b\xdf\x4c\x98\x53\x0e\xcf\x58\x95\xde\x19\xdf\x6c\x61\xcc\xbb\xfe\x9b\x9b\xad\xe3\x3e\xa2\x0d\xd5\xfa\x8f\xe0\xe5\xb3\x22\xc9\xca\xc8\x8f\x1a\x08\x88\xa5\xd5\x0f\x73\xe1\xd3\xa5\x0c\x37\x63\x52\x34\x66\xdb\xca\x33\xbe\x9e\x7f\xea\x6c\x79\xe5\x2a\xd9\x2e\xa8\x7e\x44\xbc\x26\xf6\xbe\xba\x2f\xb4\x74\x7d\xd8\xce\x26\x4c\x03\x39\xed\x38\x7a\xc7\x07\xb3\xdd\x9d\x7d\x59\xe3\xc3\xcc\xe4\x8c\xa3\xf5\x03\x53\xb0\x97\xab\xf3\x97\x2d\x3a\x32\xf5\x33\xad\x58\x36\x88\x76\x42\x87\x0a\x3e\x75\x4d\x04\xe5\x19\xe0\xd4\x9b\xab\x23\x9c\x57\x48\x76\xfb\x29\x9c\x16\x71\xe3\x65\x9e\xec\x59\x28\x8f\x89\xbd\x79\xba\xdc\xb9\xa4\x83\x99\x94\xb9\xad\x35\x08\x75\x7a\xd1\xe3\x94\x54\xf2\xa3\x77\x19\xff\xe3\x3f\x42\x55\x39\xf3\x39\x6e\x17\x3a\x6b\x9c\x79\x52\x77\x1a\x00\x00\x88\x78\x52\x56\x67\x26\xe3\xf0\x3f\x01\x00\x00\xff\xff\xfc\x11\x31\x64\x62\x05\x00\x00")

func assetsImgSheetPngBytes() ([]byte, error) {
	return bindataRead(
		_assetsImgSheetPng,
		"assets/img/sheet.png",
	)
}

func assetsImgSheetPng() (*asset, error) {
	bytes, err := assetsImgSheetPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/img/sheet.png", size: 1378, mode: os.FileMode(438), modTime: time.Unix(1503629217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSheetdescSheetJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\xcb\x6e\x86\x20\x10\x85\xd7\x90\xf0\x0e\x93\x59\xbb\x28\xde\xcb\xab\x34\x5d\x10\xa5\xc5\xb4\x6a\xe3\xa5\xb6\x31\xbe\x7b\x03\x62\x37\x3f\x89\x0b\x89\x1b\x60\x4e\x66\xe6\x83\x1c\x66\x65\x94\xa0\x5c\xe4\x87\xea\x50\x80\x89\x08\xd6\xf3\x20\xa7\xa6\x37\x02\x66\x23\x46\x56\x7c\x1b\x64\xab\x46\x14\xf0\x62\x42\xb2\x02\xfe\xa0\x80\xa7\x08\xf0\xd7\xed\x0b\x0a\xe0\x79\x04\xa8\xf7\x83\xcd\x23\x28\xbb\x4a\xf7\x83\x69\xbe\x97\x14\xae\x84\x67\xb0\x1d\x39\x8b\x6a\xde\xf5\x84\x02\x62\x2b\x38\xdd\x15\xd8\x9e\x21\x21\x89\x07\x92\xc4\x81\x21\xdc\x03\x49\xcb\x1b\x20\x79\x7a\x03\xa4\x0c\x6d\xbc\x0f\xf2\x7c\x87\xf1\x9c\x87\x76\xde\xfd\x61\xb3\xbe\x32\xba\xe3\xb0\xa9\x3f\xd5\xff\x80\xf9\x67\xe9\xf2\x4d\x7c\xdc\xb6\xff\x3e\xe3\x1e\x56\x5a\x5a\x20\xec\xd7\xdc\x55\xfa\xec\xbd\xf9\x05\x70\xf1\xc0\x65\x74\x63\xf4\x2f\x00\x00\xff\xff\x56\x62\xdf\x19\xcf\x04\x00\x00")

func assetsSheetdescSheetJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsSheetdescSheetJson,
		"assets/sheetDesc/sheet.json",
	)
}

func assetsSheetdescSheetJson() (*asset, error) {
	bytes, err := assetsSheetdescSheetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sheetDesc/sheet.json", size: 1231, mode: os.FileMode(438), modTime: time.Unix(1504928194, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/img/sheet.png": assetsImgSheetPng,
	"assets/sheetDesc/sheet.json": assetsSheetdescSheetJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"img": &bintree{nil, map[string]*bintree{
			"sheet.png": &bintree{assetsImgSheetPng, map[string]*bintree{}},
		}},
		"sheetDesc": &bintree{nil, map[string]*bintree{
			"sheet.json": &bintree{assetsSheetdescSheetJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

